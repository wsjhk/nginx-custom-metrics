user  nginx;
worker_processes  auto;

error_log  /usr/local/nginx/log/error.log warn;
pid        /var/run/nginx.pid;

worker_rlimit_nofile 1000000;

worker_shutdown_timeout 3600s;

events {
    multi_accept        on;
    use                 epoll;
    worker_connections  500000;
    accept_mutex        off;
}

http {
	    lua_package_path "/usr/local/nginx/lua/?.lua;;";

        init_by_lua_block {
                collectgarbage("collect")

                -- init modules
                local ok, res

                ok, res = pcall(require, "monitor")
                if not ok then
                	error("require failed: " .. tostring(res))
                else
                	monitor = res
                end

                ok, res = pcall(require, "plugins")
                if not ok then
                	error("require failed: " .. tostring(res))
                else
                	plugins = res
                end
                -- load all plugins that'll be used here
        	plugins.init({  })
        }

        init_worker_by_lua_block {
                monitor.init_worker(10000)
                plugins.run()
        }
        log_by_lua_block {
                monitor.call()
                plugins.run()
        }
	server {
		listen 127.0.0.1:80;
		server_name _;

		location /nginx_status
		{
			stub_status on;
			access_log off;
			allow 127.0.0.1;
			deny all;
		}
	}
	include       /usr/local/nginx/mime.types;
	default_type  application/octet-stream;

	add_header X-APM-TraceId  $http_x_apm_traceid;
    proxy_set_header X-APM-TraceId	$http_x_apm_traceid;

	log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent $request_length "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for" "$upstream_addr" "$upstream_status" "$request_time" "$upstream_response_time" $host "$http_x_apm_traceid"';


	access_log  /usr/local/nginx/log/access.log  main;

	sendfile        on;

	keepalive_timeout  65;
	server_names_hash_max_size 512;
	server_names_hash_bucket_size 512;
	proxy_headers_hash_max_size 8192;
	proxy_headers_hash_bucket_size 8192;
	limit_conn_zone $remote_addr zone=one:10m;# 限制请求数，建立10M的缓存区存放请求
	map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
}

	set_real_ip_from 10.20.4.4;
	real_ip_header    X-Forwarded-For;

	variables_hash_max_size 10240;
	resolver 172.17.82.12 valid=30s;
	include /usr/local/nginx/conf.d/*.conf;
 }



stream {

    log_format basic '$remote_addr [$time_local] '
                 '$protocol $status $bytes_sent $bytes_received '
                 '$session_time "$upstream_addr" '
                 '"$upstream_bytes_sent" "$upstream_bytes_received" "$upstream_connect_time"';
    access_log  /var/log/nginx/tcp.gz.cvte.cn.access.log  basic buffer=32k;

    include /usr/local/nginx/conf.d/tcp/*.conf;
}